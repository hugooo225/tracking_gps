version: '3.8'
services:
    zookeeper:
        image: wurstmeister/zookeeper
        container_name: zookeeper
        ports:
          - '2181:2181'

    kafka:
        image: wurstmeister/kafka
        container_name: kafka
        ports:
          - '9092:9092'
        environment:
          - KAFKA_BROKER_ID=1
          - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
          - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
          - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
          - ALLOW_PLAINTEXT_LISTENER=yes
          - KAFKA_CREATE_TOPICS=coordinates:2:1
          # - TOPIC_AUTO_CREATE=true
          - DELETE_TOPIC_ENABLE=true
          - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
          - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
        depends_on:
          - zookeeper

    postgres:
        image: postgres:latest
        container_name: my_postgres
        environment:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: 1234
          POSTGRES_DB: gps_tracking_db
        ports:
          - "5432:5432"
        volumes:
          - ./initdb.d:/docker-entrypoint-initdb.d
          - postgres_data:/var/lib/postgresql/data


    producer:
      build:
        context: ./back/producer  
        dockerfile: Dockerfile   
      container_name: producer
      environment:
        - BOOTSTRAP_SERVERS=kafka:9092
      depends_on:
        - kafka

    producer_2:
      build:
        context: ./back/producer_2  
        dockerfile: Dockerfile   
      container_name: producer_2
      environment:
        - BOOTSTRAP_SERVERS=kafka:9092
      depends_on:
        - kafka

    consumer:
        build:
          context: ./back/consumer  # Chemin relatif vers le Dockerfile du consumer
          dockerfile: Dockerfile    # Nom du fichier Dockerfile
        container_name: consumer
        environment:
          - BOOTSTRAP_SERVERS=kafka:9092  # Connexion à Kafka via le nom de service Docker
          - DATABASE_URL=postgresql://admin:1234@postgres:5432/gps_tracking_db  # Connexion à PostgreSQL
        depends_on:
          - kafka
          - postgres
        ports:
          - '8000:8000'  # Expose l'API FastAPI

volumes:
  postgres_data:

